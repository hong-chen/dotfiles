# added by Hong Chen (hong.chen.cu@gmail.com)

snippet ib "import basic libraries" b
import os
import sys
import glob
import datetime
import copy
import multiprocessing as mp
from collections import OrderedDict
# from tqdm import tqdm
$0
endsnippet

snippet ic "import sci-calc libraries" b
import h5py
from pyhdf.SD import SD, SDC
from netCDF4 import Dataset
import numpy as np
from scipy import interpolate
$0
endsnippet

snippet ip "import sci-plot libraries" b
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.path as mpl_path
import matplotlib.image as mpl_img
import matplotlib.patches as mpatches
import matplotlib.gridspec as gridspec
from matplotlib import rcParams, ticker
from matplotlib.ticker import FixedLocator
from mpl_toolkits.axes_grid1 import make_axes_locatable
# import cartopy.crs as ccrs
# mpl.use('Agg')
$0
endsnippet

snippet fig "create figure" b
# figure
#╭────────────────────────────────────────────────────────────────────────────╮#
plot = True
if plot:
	plt.close('all')
	fig = plt.figure(figsize=(8, 6))
	# fig.suptitle('Figure')
	# plot1
	#╭──────────────────────────────────────────────────────────────╮#
	ax1 = fig.add_subplot(111)
	# cs = ax1.imshow(${2:data}.T, origin='lower', cmap='jet', zorder=0) #, extent=extent, vmin=0.0, vmax=0.5)${1:
	# ax1.scatter(x, y, s=2, c='k', lw=0.0)
	# ax1.plot([0, 1], [0, 1], color='gray', ls='--')
	# ax1.axhline(0.0, color='gray', ls='--')
	# ax1.hist(.ravel(), bins=100, histtype='stepfilled', alpha=0.5, color='black')
	# ax1.set_xlim((0, 1))
	# ax1.set_ylim((0, 1))
	# ax1.set_xlabel('X')
	# ax1.set_ylabel('Y')
	# ax1.set_title('Figure')
	# ax1.xaxis.set_major_locator(FixedLocator(np.arange(0, 100, 5)))
	# ax1.yaxis.set_major_locator(FixedLocator(np.arange(0, 100, 5)))}
	#╰──────────────────────────────────────────────────────────────╯#
	# save figure
	#╭──────────────────────────────────────────────────────────────╮#
	# fig.subplots_adjust(hspace=0.3, wspace=0.3)
	# _metadata_ = {'Computer': os.uname()[1], 'Script': os.path.abspath(__file__), 'Function':sys._getframe().f_code.co_name, 'Date':datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
	# plt.savefig('%s.png' % (_metadata_['Function'],), bbox_inches='tight', metadata=_metadata_)
	#╰──────────────────────────────────────────────────────────────╯#
	plt.show()
	plt.close(fig)
	plt.clf()
	sys.exit()
#╰────────────────────────────────────────────────────────────────────────────╯#
endsnippet

snippet = "create seperation line" b
# ${1:L3 Comment}
#╭────────────────────────────────────────────────╮#
#╰────────────────────────────────────────────────╯#
endsnippet

snippet == "create seperation line" b
# ${1:L2 Comment}
#╭──────────────────────────────────────────────────────────────╮#
#╰──────────────────────────────────────────────────────────────╯#
endsnippet

snippet === "create seperation line" b
# ${1:L1 Comment}
#╭────────────────────────────────────────────────────────────────────────────╮#
#╰────────────────────────────────────────────────────────────────────────────╯#
endsnippet

snippet cmap "create colormap" b
cmap = mpl.colormaps['jet'].copy()
cmap.set_under('white')
endsnippet

snippet hmap "create heatmap" b
# heatmap
#╭──────────────────────────────────────────────────────────────╮#
xedge = np.linspace(0.0, 1.0, 51)
yedge = np.linspace(0.0, 1.0, 51)
heatmap, xedge, yedge = np.histogram2d(${0:data_x}.ravel(), ${1:data_y}.ravel(), bins=(xedge, yedge))
extent = [xedge[0], xedge[-1], yedge[0], yedge[-1]]
x = (xedge[:-1]+xedge[1:])/2.0
y = (yedge[:-1]+yedge[1:])/2.0
xx, yy = np.meshgrid(x, y, indexing='ij')
# levels = np.power(10, np.linspace(0.0, np.log10(heatmap.max()), 101))
levels = np.linspace(0, heatmap.max(), 101)
cmap = mpl.cm.get_cmap('jet').copy()
cmap.set_under('white')
cs = ax1.contourf(xx, yy, heatmap, levels, extent=extent, extend='both', cmap=cmap, zorder=0)
ax1.plot(extent[:2], extent[2:], color='gray', ls='--', lw=1.5)
ax1.set_xlim(extent[:2])
ax1.set_ylim(extent[2:])
ax1.set_title('Heatmap')
divider = make_axes_locatable(ax1)
cax = divider.append_axes('right', '5%', pad='3%')
cbar = fig.colorbar(cs, cax=cax)
# cbar.set_label('', rotation=270, labelpad=4.0)
# cbar.set_ticks([])
# cax.axis('off')
#╰──────────────────────────────────────────────────────────────╯#
endsnippet

snippet savefig "save png file" b
_metadata_ = {'Computer': os.uname()[1], 'Script': os.path.abspath(__file__), 'Function':sys._getframe().f_code.co_name, 'Date':datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
plt.savefig('%s.png' % ($0_metadata_['Function']), bbox_inches='tight', metadata=_metadata_)
plt.close(fig)
plt.clf()
endsnippet

snippet legend "create legend" b
patches_legend = [
                  mpatches.Patch(color='black' , label='A'), \
                  mpatches.Patch(color='red'   , label='B'), \
#                  mpatches.Patch(color='blue'  , label='C'), \
#                  mpatches.Patch(color='green' , label='D'), \
                 ]
# ax1.legend(handles=patches_legend, bbox_to_anchor=(0., 1.01, 1., .102), loc=3, ncol=len(patches_legend), mode="expand", borderaxespad=0., frameon=False, handletextpad=0.2, fontsize=14)
ax1.legend(handles=patches_legend, loc='upper right', fontsize=16)
$0
endsnippet

snippet cbar "create colorbar" b
divider = make_axes_locatable(${0:ax1})
cax = divider.append_axes('right', '5%', pad='3%')
cbar = fig.colorbar(cs, cax=cax)
# cbar.set_label('', rotation=270, labelpad=4.0)
# cbar.set_ticks([])
# cax.axis('off')
endsnippet

snippet mp "multiprocessing" b
mp_args = zip($1)
pool = mp.Pool(processes=${2:8})
pool.outputs = pool.map(${3:test}, mp_args)
pool.close()
pool.join()
$0
endsnippet

snippet def "defining a function" b
def ${1:test}():
    $0
    pass
endsnippet

snippet ifmain "defining main function" b
if __name__ == '__main__':

    ${1:test}()
	pass
endsnippet

snippet rad "radiance" b
ax1.set_ylabel('Radiance [$\\\\mathrm{W m^{-2} nm^{-1} sr^{-1}}$]')
endsnippet

snippet flux "irradiance" b
ax1.set_ylabel('Irradiance [$\\\\mathrm{W m^{-2} nm^{-1}}$]')
endsnippet

snippet wvl "wavelength" b
ax1.set_xlabel('Wavelength [nm]')
endsnippet

snippet tmhr "time in hour" b
ax1.set_xlabel('UTC Time [hour]')
endsnippet

snippet sb "add slurm specifications" b
#!/bin/env python
#SBATCH --partition=shas
#SBATCH --nodes=1
#SBATCH --ntasks=24
#SBATCH --ntasks-per-node=24
#SBATCH --time=04:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=hong.chen.cu@gmail.com
#SBATCH --output=sbatch-output_%x_%j.txt
#SBATCH --job-name=${1:test}
$0
endsnippet

snippet h5 "save file in hdf5 format" b
#╭────────────────────────────────────────────────────────────────────────────╮#
fname = 'data_$1.h5'
h5f = h5py.File(fname, 'w')
h5d_$1 = h5f.create_dataset('${1:data}', data=$1, compression='gzip', compression_opts=9, chunks=True)
# h5f['$1'] = $1
# h5g = h5f.create_group('g0')
# h5g['$1'] = $1
h5f.close()
#╰────────────────────────────────────────────────────────────────────────────╯#
endsnippet

snippet dset "save dataset" b
h5d_$1 = f.create_dataset('${1:data}', data=$1, compression='gzip', compression_opts=9, chunks=True)
endsnippet

snippet dsetall "save dataset (adding attributes)" b
h5d_$1 = f.create_dataset('${1:data}', data=$1, compression='gzip', compression_opts=9, chunks=True)
# h5d_$1.dims[0].label = 'x'
# h5d_$1.dims[1].label = 'y'
# h5d_$1.attrs['description'] = ''
# h5d_$1.attrs['long_name'] = ''
# h5d_$1.attrs['units'] = 'N/A'
# h5d_$1.attrs['scale_factor'] = 1.0
# h5d_$1.attrs['add_offset'] = 0.0
# h5d_$1.attrs['_FillValue'] = -999.0
endsnippet
