# added by Hong Chen (hong.chen.cu@gmail.com)

snippet ib "import basic libraries" b
import os
import sys
import glob
import datetime
$0
endsnippet

snippet ic "import sci-calc libraries" b
import h5py
from pyhdf.SD import SD, SDC
from netCDF4 import Dataset
import numpy as np
from scipy import interpolate
$0
endsnippet

snippet ip "import sci-plot libraries" b
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.image as mpl_img
import matplotlib.patches as mpatches
import matplotlib.gridspec as gridspec
from matplotlib import rcParams, ticker
from matplotlib.ticker import FixedLocator
from mpl_toolkits.axes_grid1 import make_axes_locatable
# import cartopy.crs as ccrs
# mpl.use('Agg')
$0
endsnippet

snippet fig "create figure" b
# figure
#/----------------------------------------------------------------------------\#
plt.close('all')
fig = plt.figure(figsize=(8, 6))
# fig.suptitle('Figure')
# plot
#/----------------------------------------------------------------------------\#
ax1 = fig.add_subplot(111)
ax1.scatter(x$0, y, s=6, c='k', lw=0.0)
# ax1.imshow(.T, origin='lower', cmap='jet', zorder=0) #, extent=extent, vmin=0.0, vmax=0.5)
# ax1.hist(.ravel(), bins=100, histtype='stepfilled', alpha=0.5, color='black')
# ax1.set_xlim(())
# ax1.set_ylim(())
# ax1.set_xlabel('')
# ax1.set_ylabel('')
# ax1.set_title('')
# ax1.xaxis.set_major_locator(FixedLocator(np.arange(0, 100, 5)))
# ax1.yaxis.set_major_locator(FixedLocator(np.arange(0, 100, 5)))
#\----------------------------------------------------------------------------/#
# add colorbar
#/----------------------------------------------------------------------------\#
# divider = make_axes_locatable(ax1)
# cax = divider.append_axes('right', '5%', pad='3%')
# fig.colorbar(cs, cax=cax)
#\----------------------------------------------------------------------------/#
# save figure
#/----------------------------------------------------------------------------\#
# _metadata = {'Computer': os.uname()[1], 'Script': os.path.abspath(__file__), 'Function':sys._getframe().f_code.co_name, 'Date':datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# plt.savefig('%s.png' % _metadata['Function'], bbox_inches='tight', metadata=_metadata)
#/----------------------------------------------------------------------------\#
# plt.subplots_adjust(hspace=0.3, wspace=0.3)
plt.show()
sys.exit()
#\----------------------------------------------------------------------------/#
endsnippet

snippet == "create seperation line" b
# ${0:Comment}
#/----------------------------------------------------------------------------\#
#\----------------------------------------------------------------------------/#
endsnippet

snippet savefig "save png file" b
_metadata   = {'Computer': os.uname()[1], 'Script': os.path.abspath(__file__), 'Function':sys._getframe().f_code.co_name, 'Date':datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
plt.savefig('%s.png' % _metadata['Function']$0, bbox_inches='tight', metadata=_metadata)
endsnippet

snippet legend "create legend" b
patches_legend = [
                  mpatches.Patch(color='black' , label='A'), \
                  mpatches.Patch(color='red'   , label='B'), \
#                  mpatches.Patch(color='green' , label='C'), \
#                  mpatches.Patch(color='blue'  , label='D'), \
                 ]
# ax1.legend(handles=patches_legend, bbox_to_anchor=(0., 1.01, 1., .102), loc=3, ncol=len(patches_legend), mode="expand", borderaxespad=0., frameon=False, handletextpad=0.2, fontsize=14)
ax1.legend(handles=patches_legend, loc='upper right', fontsize=14)
$0
endsnippet

snippet cbar "create colorbar" b
divider = make_axes_locatable(${0:ax1})
cax = divider.append_axes('right', '5%', pad='3%')
fig.colorbar(cs, cax=cax)
endsnippet

snippet mp "multiprocessing" b
mp_args = zip($1)
pool = mp.Pool(processes=${2:8})
pool.outputs = pool.map(${3:test}, mp_args)
pool.close()
pool.join()
$0
endsnippet

snippet def "defining a function" b
def ${1:test}():
    $0
    pass
endsnippet

snippet ifmain "defining main function" b
if __name__ == '__main__':

    ${1:test}()
endsnippet

snippet rad "radiance" b
ax1.set_ylabel('Radiance [$\mathrm{W m^{-2} nm^{-1} sr^{-1}}$]')
endsnippet

snippet flux "irradiance" b
ax1.set_ylabel('Irradiance [$\mathrm{W m^{-2} nm^{-1}}$]')
endsnippet

snippet wvl "wavelength" b
ax1.set_xlabel('Wavelength [nm]')
endsnippet

snippet tmhr "time in hour" b
ax1.set_xlabel('UTC Time [hour]')
endsnippet

snippet sb "add slurm specifications" b
#!/bin/env python
#SBATCH --partition=shas
#SBATCH --nodes=1
#SBATCH --ntasks=24
#SBATCH --ntasks-per-node=24
#SBATCH --time=04:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=hong.chen.cu@gmail.com
#SBATCH --output=sbatch-output_%x_%j.txt
#SBATCH --job-name=${1:test}
$0
endsnippet

snippet saveh5 "save file in hdf5 format" b
f = h5py.File(fname, 'w')
f['${1:data}'] = $1
# f['$1'].dims[0].label = 'x'
# f['$1'].dims[1].label = 'y'
# f['$1'].attrs['description'] = ''
# f['$1'].attrs['long_name'] = ''
# f['$1'].attrs['units'] = ''
# f['$1'].attrs['scale_factor'] = 1.0
# f['$1'].attrs['add_offset'] = 0.0
# f['$1'].attrs['_FillValue'] = -999.0
f.close()
endsnippet

snippet dim2 "create dimension scales" b
f['${2:x}'] = $2
f['$2'].make_scale('$2')
f['${3:y}'] = $3
f['$3'].make_scale('$3')
f['${1:data}'].dims[0].attach_scale(f['$2'])
f['$1'].dims[1].attach_scale(f['$3'])
endsnippet

snippet dset "save dataset" b
f['${1:data}'] = $1
# f['$1'].dims[0].label = 'x'
# f['$1'].dims[1].label = 'y'
# f['$1'].attrs['description'] = ''
# f['$1'].attrs['long_name'] = ''
# f['$1'].attrs['units'] = ''
# f['$1'].attrs['scale_factor'] = 1.0
# f['$1'].attrs['add_offset'] = 0.0
# f['$1'].attrs['_FillValue'] = -999.0
endsnippet
